// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'
import UnoCSS from 'unocss/vite'
import pkg from './package.json'
//import Components from 'unplugin-vue-components/vite'
import { libInjectCss } from 'vite-plugin-lib-inject-css'



const Plugins = [
  vue(),
  libInjectCss(),
  UnoCSS({
    content: {
      pipeline: {
        include: [
          // the default
          /\.(vue|html)/,
          // include js/ts files
          resolve('src/components/**/*.{mjs,ts}'),
          resolve('src/theme/**/*.{mjs,ts}')
        ]
      }
    }
  })
]

export default defineConfig(({ mode }) => {
  if (mode === 'play') {
    return {
      plugins: Plugins,
      root: resolve(__dirname, '.playground')
    }
  }

  // Default configuration for library build
  return {
    // Use the Vue plugin for building the library    
    build: {
      
      lib: {
        entry: resolve(__dirname, 'src/index.ts'),
        name: pkg.name,
        formats: ['es'],
        fileName: (format) => `index.${format}.js`
        
      },
      
      //sourcemap: true,
      rollupOptions: {
        
        
        // Mark Vue as an external dependency to avoid bundling it
        external: ['vue'],
        output: {
          assetFileNames: 'assets/[name][extname]',
          entryFileNames: '[name].js',
         // preserveModules: false,
          globals: {
            // Define a global variable name for Vue in UMD builds
            vue: 'Vue'
          }
        }
      },
      resolve: {
        alias: {
          '@': resolve(__dirname, '/src'),
          '#': resolve(__dirname, '/dist')
        }
      },
      emptyOutDir: true // to retain the types folder generated by tsc
    },
    plugins: Plugins // plugins
  }
  
})
